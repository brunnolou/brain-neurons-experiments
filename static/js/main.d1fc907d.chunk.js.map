{"version":3,"sources":["materials/Colors/index.js","materials/Sizes/index.js","elements/Layout/index.js","elements/Canvas/index.js","components/Game/index.js","helpers/math.js","components/Particles/particles.js","components/Particles/index.js","App.js","serviceWorker.js","index.js"],"names":["colors","green","red","black","white","dark","gray","canvas","console","log","Wrapper","styled","div","_templateObject","Content","_templateObject2","Layout","react_default","a","createElement","this","props","children","Component","speedX","speedY","fadeIn","keyframes","Canvas_templateObject","Canvas","attrs","width","height","Canvas_templateObject2","clamp","x","min","max","Math","speed","MouseSpeed","init","Game","_this","space","CanvasSpace","ptsCanvas","setup","bgcolor","resize","retina","form","getForm","cellW","cellH","widthInter","follower","Pt","noiseGrid","gridPts","isMouseDown","add","start","center","paddedBounds","Object","construct","Bound","toConsumableArray","innerBound","floor","Create","noisePts","interpolate","animate","time","pointer","$subtract","divide","forEach","p","i","backAndForward","Num","cycle","backAndForwardAlphaBin","mode","step","noiseAlpha","mapToRange","noise2D","noise2DRange","mouseAlpha","pt","from","to","arguments","length","undefined","rate","fade","fadeTo","dist","noiseAlphaBin","round","alpha","stroke","fill","point","clampedSpeed","ln","Group","$add","mSize","$multiply","headMark","Line","marker","line","polygon","fillOnly","action","type","y","distance","gridCellSize","abs","bound","ready","clear","bindMouse","bindTouch","play","createChart","_this2","elements_Layout","elements_Canvas","innerRef","defaultProps","Particles","domElement","_ref","canvasWidth","canvasHeight","globalMotion","_ref$globalMotionAngl","globalMotionAngle","lastTimeStamp","particles","isLeftOrRight","random","proto","prototype","createChildren","layout","enable","context","getContext","Date","getTime","window","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","removeChildren","createParticleData","renderLoop","hasGlobalMotion","setParticleData","particle","z","direction","pointFromVector","vx","vy","vz","update","draw","clearRect","fillStyle","save","beginPath","arc","PI","restore","bind","ParticlesDemo","canvasNode","particleSystem","t","rotation","rotationPoint","tSpatial","_this3","App","BrowserRouter","Route","exact","path","render","components_Game","assign","components_Particles","Link","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1fc907d.chunk.js","sourcesContent":["const colors = {\n\tgreen: '#00fab8',\n\tred: '#ff0069',\n\tblack: '#000',\n\twhite: '#fff',\n\tdark: '#333',\n\tgray: '#888',\n}\nexport default colors;\n","export const viewport = {\n  width: 100,\n  height: 56.25\n};\n\nexport const canvas = {\n  width: 800,\n  height: 800,\n};\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { canvas } from \"../../materials/Sizes\";\nconsole.log(\"canvas: \", canvas.width);\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n\tpadding: 5%;\n`;\n\nconst Content = styled.div`\n  max-width: ${canvas.width}px;\n  max-height: ${canvas.height}px;\n  width: 100%;\n`;\n\nclass Layout extends Component {\n  render() {\n    return (\n      <Wrapper>\n        <Content>{this.props.children}</Content>\n      </Wrapper>\n    );\n  }\n}\n\nexport default Layout;\n","import styled, { keyframes } from \"styled-components\";\nimport { canvas } from \"../../materials/Sizes\";\n\nconst fadeIn = keyframes`\n\tfrom {\n\t\topacity: 0;\n\t}\n\n\tto {\n\t\topacity: 1;\n\t}\n`;\n\nconst Canvas = styled.canvas.attrs({\n  width: canvas.width,\n  height: canvas.height\n})`\n  width: ${canvas.width}px;\n  height: ${canvas.height}px;\n  animation: ${fadeIn} 1.5s;\n`;\n\nexport default Canvas;\n","import React, { Component } from \"react\";\nimport {\n  Bound,\n  CanvasSpace,\n  Create,\n  Pt,\n  Group,\n  Num,\n  Line,\n} from \"pts\";\nimport { distance, interpolate, steps } from \"@popmotion/popcorn\";\nimport MouseSpeed from \"mouse-speed\";\n\nimport colors from \"../../materials/Colors\";\nimport Layout from \"../../elements/Layout\";\nimport Canvas from \"../../elements/Canvas\";\nimport { clamp, fadeTo } from \"../../helpers/math\";\n\nconst speed = new MouseSpeed();\nlet speedX;\nlet speedY;\n\nspeed.init(function() {\n  speedX = speed.speedX;\n  speedY = speed.speedY;\n});\n\nconst noise2DRange = (p, min, max) =>\n  Num.mapToRange(Num.clamp(p.noise2D(), -0.5, 0.5), -0.5, 0.5, min, max);\nconst mouseRadius = 90;\n\nclass Game extends Component {\n  static defaultProps = {\n    mode: \"dots\"\n  };\n\n  createChart() {\n    // Create Space and Form\n    // pass the ref canvas element directly into CanvasSpace\n    this.space = new CanvasSpace(this.ptsCanvas).setup({\n      bgcolor: colors.black,\n      resize: true,\n      retina: true\n    });\n    this.form = this.space.getForm();\n\n    let follower = new Pt();\n    let noiseGrid = [];\n    let gridPts = [];\n    const gridCellSize = 50;\n\n    let cellW;\n    let cellH;\n\n    let dist = 0;\n    let isMouseDown = false;\n\n    let widthInter;\n\n    this.space.add({\n      start: () => {\n        follower = this.space.center;\n\n        const paddedBounds = new Bound(\n          ...this.space.innerBound\n        );\n        cellW = Math.floor(paddedBounds.width / gridCellSize);\n        cellH = Math.floor(paddedBounds.height / gridCellSize);\n\n        gridPts = Create.gridPts(paddedBounds, cellW, cellH);\n\n        noiseGrid = Create.noisePts(gridPts, 0.12, 0.12, cellW, cellH);\n\n        follower = this.space.center;\n        widthInter = interpolate([0, this.space.width], [1, 0]);\n      },\n      // render\n      animate: time => {\n        follower = follower.add(this.space.pointer.$subtract(follower));\n\n        let radius = 30;\n        follower = follower.add(\n          this.space.pointer.$subtract(follower).divide(1.5)\n        );\n\n        noiseGrid.forEach((p, i) => {\n          let backAndForward = Num.cycle((time % 3000) / 3000);\n          let backAndForwardAlphaBin = 0;\n\n          if (this.props.mode === \"self-motion\") {\n            backAndForwardAlphaBin = 0.1 + widthInter(p.x);\n\n            p.step(0.05 * backAndForward, 0.0);\n          } else {\n            p.step(0.005, 0.0);\n          }\n\n          const noiseAlpha =\n            0.2 + clamp(1 - (noise2DRange(p, 0, 1) % 4) * 4, 0, 1);\n\n          p.mouseAlpha = fadeTo(\n            p,\n            isMouseDown && p.dist < mouseRadius\n              ? 0.5 + (mouseRadius - dist) / mouseRadius\n              : 0,\n            0,\n            this.props.mode === \"vector\" ? 0.03 : undefined\n          );\n          const noiseAlphaBin = Math.round(noiseAlpha * 2) / 2;\n\n          const alpha =\n            0.2 + (this.props.mode === \"cursor\" ? noiseAlphaBin : p.mouseAlpha);\n\n          if (this.props.mode === \"dots\" || this.props.mode === \"cursor\")\n            this.form\n              .stroke(false)\n              .fill(\"rgba(255,255,255, \" + alpha + \")\", 1)\n              .point(p, 10, \"circle\");\n\n          if (this.props.mode === \"self-motion\")\n            this.form\n              .stroke(false)\n              .fill(\"rgba(255,255,255, \" + backAndForwardAlphaBin + \")\", 1)\n              .point(p, 10, \"circle\");\n        });\n\n        if (this.props.mode === \"vector\") {\n          noiseGrid.forEach((p, i) => {\n            // p.step(0.01, 0.01);\n            // p2.step(0.01, 0.08);\n            // this.form.fillOnly(\"#09f\").point(p, 1 + Math.abs(p.noise2D() * 20));\n\n            // const ln = Line.fromAngle(\n            //   p,\n            //   Const.one_degree * 180 + p.noise2D() * 3,\n            //   noise2DRange(p2, 1, cellH * 3)\n            // );\n            const clampedSpeed = p.speed / gridCellSize;\n\n            const ln = new Group(\n              p.$add(\n                new Pt(\n                  p.mouseAlpha > 0.5 ? p.speedX : 0,\n                  p.mouseAlpha > 0.5 ? p.speedY : 0\n                )\n              ),\n              p\n            );\n            const mSize = new Pt(5, 15).$multiply(\n              new Pt(0.1 + clampedSpeed, 0.1 + clampedSpeed)\n            );\n\n            const headMark = Line.marker(ln, mSize, \"arrow\", false);\n\n            this.form\n              .stroke(\"rgba(255,255,255, \" + (0.3 + clampedSpeed) + \")\", 2)\n              .line(ln);\n            this.form\n              .fill(\"rgba(255,255,255, \" + (0.3 + clampedSpeed) + \")\", 1)\n              .polygon(headMark);\n\n            this.form\n              .stroke(false)\n              .fill(\"rgba(255,255,255, 0.4)\", 2)\n              .point(p, 2, \"circle\");\n          });\n        }\n\n        if (this.props.mode === \"cursor\")\n          this.form.fillOnly(\"#f00\").point(follower, radius, \"circle\");\n      },\n      // Mouse or touch action\n      action: (type, x, y) => {\n        switch (type) {\n          case \"down\": {\n            isMouseDown = true;\n            break;\n          }\n          case \"out\":\n          case \"up\": {\n            isMouseDown = false;\n            break;\n          }\n          case \"move\": {\n            noiseGrid.forEach((p, i) => {\n              p.dist = distance(\n                { x: p.x, y: p.y },\n                {\n                  x: this.space.pointer.x,\n                  y: this.space.pointer.y\n                }\n              );\n            });\n\n            if (isMouseDown)\n              noiseGrid.forEach((p, i) => {\n                if (p.dist < mouseRadius) {\n                  p.speedX = clamp(\n                    speedX,\n                    -gridCellSize * 0.8,\n                    gridCellSize * 0.8\n                  );\n                  p.speedY = clamp(\n                    speedY,\n                    -gridCellSize * 0.8,\n                    gridCellSize * 0.8\n                  );\n                  p.speed = Math.max(Math.abs(p.speedX), Math.abs(p.speedY));\n                }\n              });\n          }\n          default:\n            return;\n        }\n\n        // this.space.clear(); // since we're not animating continuously, manually clear canvas and re-render chart\n        // this.animate();\n      },\n\n      resize: bound => {\n        if (this.form.ready) {\n          this.space.clear();\n          // this.animate();\n        }\n      }\n    });\n\n    // bind mouse and touch\n    this.space.bindMouse().bindTouch();\n\n    // Only animate once initially, no need to continuously animate if chart is not changing\n    this.space.play();\n  }\n\n  // Create chart on mount\n  componentDidMount() {\n    this.createChart();\n    console.log(\"this.props: \", this.props);\n  }\n\n  // When data is updated, re-render by playing animate() once\n  componentDidUpdate() {}\n\n  render() {\n    return (\n      <Layout>\n        <Canvas\n          innerRef={canvas => {\n            this.ptsCanvas = canvas;\n          }}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default Game;\n","export const clamp = (x, min, max) => Math.min(Math.max(x, min), max);\n\nexport const fadeTo = (pt, from, to = 0, rate = 0.05) => {\n  if (pt.fade === undefined) pt.fade = 1;\n\tif (from > 0) pt.fade = from;\n\tif (pt.fade !== 0) pt.fade += (to - pt.fade) * rate;\n\n\treturn pt.fade || 0\n};\n","import { pointFromVector } from \"@popmotion/popcorn\";\n\nconst PARTICLE_QUANT = 12 * 12;\nconst BOUNCE = -1;\nconst PARTICLE_COLOR = \"#555\";\nconst ARC_RADIUS = 10;\nconst SPEED = 1;\nconst GLOBAL_MOTION_PERCENTAGE = 0.2;\n\n/**\n * Particles lib class\n *\n * @class Particles\n * @constructor\n */\n\nconst Particles = function(\n  domElement,\n  { canvasWidth, canvasHeight, globalMotion, globalMotionAngle = 0 }\n) {\n  // if element doesnt exist in the DOM return early\n  if (!domElement) return;\n\n  /**\n   * A reference to the containing DOM element.\n   *\n   * @default null\n   * @property {jQuery} domElement\n   * @public\n   */\n  this.domElement = domElement;\n\n  /**\n   * Initial timestamp use to for baseline of animation loop\n   *\n   * @default null\n   * @property lastTimeStamp\n   * @type {number}\n   * @public\n   */\n  this.lastTimeStamp = null;\n\n  /**\n   * array representing particles\n   *\n   * @default empty array\n   * @property lastTimeStamp\n   * @type {array}\n   * @public\n   */\n  this.particles = [];\n\n  this.canvasWidth = canvasWidth;\n  this.canvasHeight = canvasHeight;\n  this.globalMotionAngle = globalMotionAngle;\n  this.globalMotion = globalMotion;\n  this.isLeftOrRight = this.globalMotionAngle && Math.random() > 0.5 ? 180 : 0;\n\n  this.init();\n};\n\nvar proto = Particles.prototype;\n\n/**\n * Initializes the class.\n * Runs a single setupHandlers call, followed by createChildren and layout.\n * Exits early if it is already initialized.\n *\n * @method init\n * @private\n */\nproto.init = function() {\n  this.createChildren()\n    .layout()\n    .enable();\n};\n\n/**\n * Create any child objects or references to DOM elements.\n * Should only be run on initialization of the view.\n *\n * @method createChildren\n * @returns {Particles}\n * @private\n */\nproto.createChildren = function() {\n  this.canvas = this.domElement;\n  this.context = this.canvas.getContext(\"2d\");\n  this.lastTimeStamp = new Date().getTime();\n\n  return this;\n};\n\n/**\n * handles layout of DOM elements\n *\n * @method layout\n * @returns {ParticlesController}\n * @private\n */\nproto.layout = function() {\n  window.requestAnimFrame = (function() {\n    return (\n      window.requestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame\n    );\n  })();\n\n  return this;\n};\n\n/**\n * Remove any child objects or references to DOM elements.\n *\n * @method removeChildren\n * @returns {Particles}\n * @public\n */\nproto.removeChildren = function() {\n  this.context = null;\n  this.canvasWidth = null;\n  this.canvasHeight = null;\n  this.lastTimeStamp = null;\n\n  return this;\n};\n\n/**\n * Enables the component.\n * Performs any event binding to handlers.\n * Exits early if it is already enabled.\n *\n * @method enable\n * @public\n */\nproto.enable = function() {\n  this.createParticleData();\n  this.renderLoop();\n};\n\n//////////////////////////////////////////////////////////////////////////////////\n// HELPER METHODS\n//////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates particle data objects\n *\n * @method createParticleData\n * @private\n */\nproto.createParticleData = function() {\n  var i = 0;\n  var l = PARTICLE_QUANT;\n\n  for (; i < l; i++) {\n    this.particles[i] = {\n      hasGlobalMotion: this.globalMotion && i / l > 1 - GLOBAL_MOTION_PERCENTAGE\n    };\n    this.setParticleData(this.particles[i]);\n  }\n};\n\n/**\n * Sets the base particle data\n *\n * @method setParticleData\n * @private\n */\nproto.setParticleData = function(particle) {\n  const hasGlobalMotion = particle.hasGlobalMotion;\n\n  particle.x = Math.random() * this.canvasWidth;\n  particle.y = Math.random() * this.canvasHeight;\n  particle.z = Math.random() * this.canvasHeight;\n  const direction = pointFromVector(\n    { x: 0, y: 0 },\n    hasGlobalMotion\n      ? this.globalMotionAngle + this.isLeftOrRight + 10 * (Math.random() - 0.5)\n      : 360 * Math.random(),\n    SPEED\n  );\n\n  particle.vx = direction.x;\n  particle.vy = direction.y;\n  particle.vz = (Math.random() - 0.5) * SPEED * 2;\n};\n\n/**\n * Updates the particle data object\n *\n * @method update\n * @private\n */\nproto.update = function() {\n  var i = 0;\n  var l = PARTICLE_QUANT;\n\n  for (; i < l; i++) {\n    var particle = this.particles[i];\n\n    particle.x += particle.vx;\n    particle.y += particle.vy;\n    particle.z += particle.vz;\n\n    // if (particle.x > this.canvasWidth) {\n    //   particle.x = this.canvasWidth;\n    //   particle.vx *= BOUNCE;\n    // } else if (particle.x < 0) {\n    //   particle.x = 0;\n    //   particle.vx *= BOUNCE;\n    // }\n\n    // if (particle.y > this.canvasHeight) {\n    //   particle.y = this.canvasHeight;\n    //   particle.vy *= BOUNCE;\n    // } else if (particle.y < 0) {\n    //   particle.y = 0;\n    //   particle.vy *= BOUNCE;\n    // }\n\n    // if (particle.z > this.canvasHeight) {\n    //   particle.z = this.canvasHeight;\n    //   particle.vz *= BOUNCE;\n    // } else if (particle.z < 0) {\n    //   particle.z = 0;\n    //   particle.vz *= BOUNCE;\n    // }\n\n    if (particle.x - ARC_RADIUS > this.canvasWidth) {\n      particle.x = 0;\n    } else if (particle.x + ARC_RADIUS < 0) {\n      particle.x = this.canvasWidth;\n    }\n\n    if (particle.y - ARC_RADIUS > this.canvasHeight) {\n      particle.y = 0;\n    } else if (particle.y + ARC_RADIUS < 0) {\n      particle.y = this.canvasHeight;\n    }\n\n    if (particle.z > this.canvasHeight) {\n      particle.z = this.canvasHeight;\n      particle.vz *= BOUNCE;\n    } else if (particle.z < 0) {\n      particle.z = 0;\n      particle.vz *= BOUNCE;\n    }\n  }\n};\n\n/**\n * Renders the particle on the canvas\n *\n * @method draw\n * @private\n */\nproto.draw = function() {\n  var i = 0;\n\n  if (!this.context) {\n    return;\n  }\n\n  this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n  this.context.fillStyle = PARTICLE_COLOR;\n\n  for (; i < PARTICLE_QUANT; i++) {\n    var particle = this.particles[i];\n    this.context.save();\n    this.context.beginPath();\n    this.context.arc(particle.x, particle.y, ARC_RADIUS, 0, Math.PI * 2);\n    this.context.fill();\n    this.context.restore();\n  }\n};\n\n/**\n * Creates the animation loop\n *\n * @method renderLoop\n * @private\n */\nproto.renderLoop = function() {\n  requestAnimationFrame(this.renderLoop.bind(this));\n  this.update();\n  // this.draw();\n};\n\nexport default Particles;\n","import React, { Component } from \"react\";\nimport { CanvasSpace, Pt, Num } from \"pts\";\nimport { pointFromVector } from \"@popmotion/popcorn\";\n\nimport { canvas } from \"../../materials/Sizes\";\nimport Particles from \"./particles\";\n\nimport Layout from \"../../elements/Layout\";\nimport Canvas from \"../../elements/Canvas\";\n\nimport colors from \"../../materials/Colors\";\n\nclass ParticlesDemo extends Component {\n  canvasNode = null;\n\n  componentDidMount() {\n    if (!this.canvasNode) return;\n\n    this.particleSystem = new Particles(this.canvasNode, {\n      canvasWidth: canvas.width,\n      canvasHeight: canvas.height,\n      speed: 2,\n      globalMotion: this.props.globalMotion,\n      globalMotionAngle: this.props.globalMotionAngle\n    });\n\n    this.space = new CanvasSpace(this.canvasNode).setup({\n      bgcolor: colors.black,\n      resize: true,\n      retina: true\n    });\n    this.form = this.space.getForm();\n    let follower = new Pt();\n\n    this.space.add({\n      start: () => {\n        follower = this.space.center;\n      },\n      // render\n      animate: time => {\n        const t = Num.cycle((time % 10000) / 10000);\n\n        const rotation = pointFromVector(\n          this.space.center,\n          360 * 3 * t - 80,\n          250\n        );\n        const rotationPoint = new Pt(rotation);\n\n        follower = follower.add(\n          this.space.pointer.$subtract(follower).divide(1)\n        );\n        const radius = 30;\n\n        this.particleSystem.particles.forEach((particle, i) => {\n          let radius = 10;\n\n          // if (!i) console.log(\"radius: \", radius);\n\n          if (this.props.mode === \"spatial\") {\n            const tSpatial = (Num.cycle((time % 20000) / 20000) - 0.5) * 10;\n\n            particle.vy = 0;\n            particle.vx = tSpatial;\n          }\n\n          this.form\n            .fillOnly(\n              this.props.globalMotion &&\n              particle.hasGlobalMotion &&\n              this.isMouseDown\n                ? colors.red\n                : colors.gray\n            )\n            .point(new Pt(particle), radius, \"circle\");\n        });\n\n        if (this.isMouseDown && !this.props.globalMotion)\n          this.form.fillOnly(colors.red).point(rotationPoint, radius, \"circle\");\n      },\n\n      // Mouse or touch action\n      action: (type, x, y) => {\n        switch (type) {\n          case \"down\": {\n            this.isMouseDown = !this.isMouseDown;\n            break;\n          }\n          case \"out\":\n          case \"up\": {\n            // this.isMouseDown = false;\n            break;\n          }\n          default:\n            return;\n        }\n\n        // this.space.clear(); // since we're not animating continuously, manually clear canvas and re-render chart\n        // this.animate();\n      },\n\n      resize: bound => {\n        if (this.form.ready) {\n          this.space.clear();\n          // this.animate();\n        }\n      }\n    });\n\n    // bind mouse and touch\n    this.space.bindMouse().bindTouch();\n\n    // Only animate once initially, no need to continuously animate if chart is not changing\n    this.space.play();\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Canvas\n          innerRef={canvas => {\n            this.canvasNode = canvas;\n          }}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default ParticlesDemo;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Game from \"./components/Game\";\nimport Particles from \"./components/Particles\";\n\nconst App = () => (\n  <Router>\n    <div>\n      <Route exact path=\"/\" render={props => <Game {...props} mode=\"dots\" />} />\n      <Route\n        exact\n        path=\"/cursor\"\n        render={props => <Game {...props} mode=\"cursor\" />}\n      />\n      <Route\n        path=\"/vector-field\"\n        render={props => <Game {...props} mode=\"vector\" />}\n      />\n      <Route\n        path=\"/self-motion\"\n        render={props => <Game {...props} mode=\"self-motion\" />}\n      />\n      <Route path=\"/particles\" render={props => <Particles {...props} />} />\n      <Route\n        path=\"/global-motion\"\n        render={props => <Particles globalMotion {...props} />}\n      />\n      <Route\n        path=\"/particles-spatial\"\n        render={props => <Particles mode=\"spatial\" {...props} />}\n      />\n\n      <nav>\n        <span>\n          <Link to=\"/\">Game</Link>\n        </span>\n        {\" | \"}\n        <span>\n          <Link to=\"/vector-field\">Vector Field</Link>\n        </span>\n        {\" | \"}\n        <span>\n          <Link to=\"/particles\">Particles</Link>\n        </span>\n        {\" | \"}\n        <span>\n          <Link to=\"/particles-spatial\">spatial</Link>\n        </span>\n      </nav>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './materials/Base/normalize.css';\nimport './materials/Base/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}